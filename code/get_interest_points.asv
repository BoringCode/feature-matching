% Local Feature Matching Code
% Written by James Hays, Georgia Tech
% Modified for Octave by Jon Denning, Taylor University


% Returns a set of interest points for the input image

% 'image' can be grayscale or color, your choice.
% 'feature_width', in pixels, is the local feature width. It might be
%   useful in this function in order to (a) suppress boundary interest
%   points (where a feature wouldn't fit entirely in the image, anyway)
%   or(b) scale the image filters being used. Or you can ignore it.

% 'x' and 'y' are nx1 vectors of x and y coordinates of interest points.
% 'confidence' is an nx1 vector indicating the strength of the interest
%   point. You might use this later or not.
% 'scale' and 'orientation' are nx1 vectors indicating the scale and
%   orientation of each interest point. These are OPTIONAL. By default you
%   do not need to make scale and orientation invariant local features.
function [x, y, confidence, scale, orientation] = get_interest_points(image, feature_width)

% Implement the Harris corner detector (See Szeliski 4.1.1) to start with.
% You can create additional interest point detector functions (e.g. MSER)
% for extra credit.

% If you're finding spurious interest point detections near the boundaries,
% it is safe to simply suppress the gradients / corners near the edges of
% the image.

% The lecture slides and textbook are a bit vague on how to do the
% non-maximum suppression once you've thresholded the cornerness score.
% You are free to experiment. Here are some helpful functions:
%  BWLABEL and the newer BWCONNCOMP will find connected components in 
% thresholded binary image. You could, for instance, take the maximum value
% within each component.
%  COLFILT can be used to run a max() operator on each sliding window. You
% could use this to ensure that every interest point is at a local maximum
% of cornerness.

% Placeholder that you can delete. 20 random points
%x = ceil(rand(20,1) * size(image,2));
%y = ceil(rand(20,1) * size(image,1));

% Reduce noise to reduce false positives
blur = fspecial('Gaussian', 6, 2);
blurredImage = imfilter(image, blur);
% Compute image gradient
% http://www.mathworks.com/help/images/ref/imgradient.html
[Ix, Iy] = imgradient(blurredImage, 'prewitt'); 
Ix2 = imfilter(Ix.^2, blur);
Iy2 = imfilter(Iy.^2, blur);
Ixy = imfilter(Ix.*Iy, blur);

R = rdivide((Ix2.*Iy2 - Ixy.^2), (Ix2 + Iy2));

cornerScore = 0.001;
% Minimize points that don't conform to the minimum corner score
R(R < cornerScore) = 0;

rSize = size(R);
R(1: feature_width, :) = 0;
R(rSize(1) - feature_width: rSize(1), :) = 0; % suppression of outputs near edges
R(:, 1:feature_width) = 0;
R(:, rSize(2) - feature_width:rSize(2)) = 0; % supp continued

% Find max within R in a sliding 5 by 5 matrix (neighborhood)
r_max = colfilt(R, [5 5], 'sliding', @max);
% Creates a new array where maxes are indicated with a 1
% http://www.mathworks.com/help/matlab/matlab_prog/array-comparison-with-relational-operators.html
maxes = R == r_max;
% All non-maximums are turned to 0 by dot multiplying against maxes matrix
r_suppressed = R.*maxes;

% Find non-zero elements (in other words, maximums), http://www.mathworks.com/help/matlab/ref/find.html
[y, x] = find(r_suppressed); 
end

